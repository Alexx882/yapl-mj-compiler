options {
    LOOKAHEAD = 1;
    MULTI = true;
    TRACK_TOKENS = true;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = false;
    IGNORE_CASE = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    SANITY_CHECK = true;
    FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Yapl)

package yapl.compiler;

import yapl.impl.*;
import yapl.interfaces.*;
import yapl.lib.*;

import static yapl.impl.ErrorType.*;

import java.io.*;
import java.nio.file.Files;import java.nio.file.Path;import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

/**
 * Processes a yapl file.
 *
 * Usage: java Yapl [--scan-only] [src_path] [-o out_path]
 *
 * Where src_path points to a yapl source file,
 * and out_path to the compiled binary MJ executable.
 * If no src_path is provided, input will be read from STDIN.
 */
public class Yapl {
    private static String progName = ""; // has to be known even on error

    private static SymbolTable symbolTable = new SymbolTable();

    private static ExtendedBackendBinSM backend = new BackendMJ();

    private static CodeGenBinSM codeGen;

    public static void main(String[] args) throws FileNotFoundException {
        // parse per default
        boolean parse = true;
        String srcPath = null;
        String outPath = null;

        for(int i = 0; i < args.length; i++) {
            if ("--scan-only".equalsIgnoreCase(args[i])) {
                parse = false;
            } else if ("-o".equals(args[i])) {
                if (++i < args.length) {
                    outPath = args[i];
                }
            } else {
                srcPath = args[i];
            }
        }

        // if no srcPath is provided, read from STDIN
        InputStream input = srcPath != null ? new FileInputStream(srcPath) : System.in;

        codeGen = new CodeGenBinSM(backend);

        Yapl parser = new Yapl(input);

        //noinspection TryWithIdenticalCatches // since jjtree apparently does not support collapsed catches
        try {
            if (parse){
                parser.Program();

                if (outPath != null) {
                    OutputStream output = new FileOutputStream(outPath);
                    backend.writeObjectFile(output);
                }

                CompilerMessage.printOK(progName);
            } else {
                parser.PrintTokens();
            }

        } catch (TokenMgrError e) {
            CompilerMessage.printError(e, progName);
        } catch (ParseException e) {
            CompilerMessage.printError(e, progName);
        } catch (YaplException e) {
            CompilerMessage.printError(e, progName);
        } catch (IOException e) {
            System.err.println("Could not write output.");
            e.printStackTrace();
        }
    }
}

PARSER_END(Yapl)

SKIP : // ignore whitespace
{
    " " | "\t" | "\n" | "\r"
}

SPECIAL_TOKEN : // comment syntax from JavaCC docs
{
  "/*" : WithinComment // switch to WithinComment state
}

<WithinComment> SPECIAL_TOKEN :
{
  "*/" : DEFAULT // switch back to normal
}

<WithinComment> MORE : // append to previous token
{
  // since the end comment "*/" is defined above, there is no need to explicitly check for it
  <~[]> // "not nothing" -> any symbol
}

TOKEN : { // Keywords. Need to be defined before <ident>
    < TRUE: "True" >
  | < FALSE: "False" >
  | < NEW: "new" >
  | < AND: "And" >
  | < OR: "Or" >
  | < IF: "If" >
  | < THEN: "Then" >
  | < ELSE: "Else" >
  | < ENDIF: "EndIf" >
  | < WHILE: "While" >
  | < DO: "Do" >
  | < ENDWHILE: "EndWhile" >
  | < RETURN: "Return" >
  | < WRITE: "Write" >
  | < BEGIN: "Begin" >
  | < END: "End" >
  | < INT: "int" >
  | < BOOL: "bool" >
  | < VOID: "void" >
  | < CONST: "Const" >
  | < RECORD: "Record" >
  | < ENDRECORD: "EndRecord" >
  | < DECLARE: "Declare" >
  | < PROCEDURE: "Procedure" >
  | < PROGRAM: "Program" >
}

TOKEN : { // operators
    < GT: ">" >
  | < GE: ">=" >
  | < LT: "<" >
  | < LE: "<=" >
  | < EQ: "==" >
  | < NE: "!=" >
  | < ADD: "+" >
  | < SUB: "-" >
  | < MUL: "*" >
  | < DIV: "/" >
  | < MOD: "%" >
  | < CONST_ASSIGN: "=" >
  | < ASSIGN: ":=" >
  | < ARR_LEN: "#" >
  | < L_BRACKET: "(" >
  | < R_BRACKET: ")" >
  | < L_SQ_BRACKET: "[" >
  | < R_SQ_BRACKET: "]" >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < DOT: "." >
}

TOKEN :
{
    < ident: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
    < number: ( ["0"-"9"] )+ >
|
    < string: "\"" ([" ","a"-"z","A"-"Z","_","0"-"9",
                   "+","-","*","/",".",",",";",":","!","?","=","#","%","<",">","$",
                   "(",")","[","]","{","}","\\","@","&","^","|"])* "\"">
}

void Program() throws YaplException :
{Token name, endName;}
{
    <PROGRAM> name=<ident> {

        progName=name.image;

        symbolTable.openScope();

        YaplSymbol symbol = new YaplSymbol(progName, SymbolKind.Program);
        symbolTable.setParentSymbol(symbol);

    }
    ( Decl(true) | Procedure() )*
    <BEGIN> { codeGen.enterProc(symbol); }
    StatementList()
    <END> endName=<ident> <DOT> {

        symbolTable.closeScope(endName.image, true, endName.beginLine, endName.beginColumn);
        codeGen.exitProc(symbol);

    } <EOF>
}

void PrintTokens() :
{ Token t; }
{
    {
        do {
            t = getNextToken();

            // collect special tokens that appeared between t and the last token
            // access through t.specialToken (if more than one, then access recursively -> need to reverse order)


            //noinspection Convert2Diamond // since jjtree apparently does not support those
            Stack<Token> stack = new Stack<Token>();
            Token s = t.specialToken;
            while (s != null) {
                stack.push(s);
                s = s.specialToken;
            }

            if (!stack.empty()) {
                System.out.println("[begin special]");
                while (!stack.empty())
                    System.out.println(stack.pop().toString());
                System.out.println("[end special]");
            }

            System.out.println(t.toString());
        } while (t.kind != EOF);
    }
    <EOF >
}

Token RelOp() throws YaplException #void :
{Token t;}
{
    (t=<LT> | t=<LE> | t=<GT> | t=<GE>) {return t;}
}

Token EqualOp() throws YaplException #void :
{Token t;}
{
    (t=<EQ> | t=<NE>) {return t;}
}

Token AddOp() throws YaplException #void :
{Token t;}
{
    (t=<ADD> | t=<SUB>) {return t;}
}

Token MulOp() throws YaplException #void :
{Token t;}
{
    (t=<MUL> | t=<DIV> | t=<MOD>) {return t;}
}

Attrib Literal() throws YaplException #void :
{Token t; YaplAttrib x;}
{
    (
        <TRUE> { x = new YaplAttrib(true); }
      | <FALSE> { x = new YaplAttrib(false); }
      | t=<number> { x = new YaplAttrib(Integer.parseInt(t.image)); }
    )
    { codeGen.loadValue(x); return x; }
}

// used to access properties of records.
// f.e.: someRecord.someProperty
Attrib Selector(Attrib parent) throws YaplException :
{Token t; Attrib index, result;}
{
    { if (parent.getKind() != Attrib.RegValue) codeGen.loadValue(parent); }
    (
        // Array Element Selector
        t=<L_SQ_BRACKET> index=Expr() {
            Type parentType = parent.getType();
            if (!parentType.isArray())
                throw new YaplException(SelectorNotArray, t);
            if (!index.getType().isInt())
                throw new YaplException(BadArraySelector, t);

            codeGen.arrayOffset(parent, index);
            result = new YaplAttrib(Attrib.ArrayElement, ((ArrayType) parentType).getElemType());
        } <R_SQ_BRACKET>

        // Record Field Selector
      | <DOT> t=<ident> {
            Type parentType = parent.getType();
            if (!parentType.isRecord())
                throw new YaplException(SelectorNotRecord, t);
            RecordType recordType = (RecordType) parentType;
            if (!recordType.hasField(t.image))
                throw new YaplException(InvalidRecordField, t, t, recordType.name);

            codeGen.recordOffset(parent, recordType.getField(t.image));
            result = parent;
        }
    )
    [ result=Selector(result) ] { return result; }
}

// retrieves the length of an array.
// throws an exception if the identifier is not found
// throws an exception if the "#" operator is applied to a non-array
// f.e.: #someArray
Attrib ArrayLen() throws YaplException :
{Token t; Attrib arr;}
{
    <ARR_LEN> t=<ident> {
        String symbolName = t.image;
        symbolTable.checkCorrectDeclarationAsArray(symbolName, t.beginLine, t.beginColumn);
        arr = new YaplAttrib(symbolTable.lookup(symbolName));
    }
    [ arr=Selector(arr) ]
    {
        if (!arr.getType().isArray())
            throw new YaplException(ArrayLenNotArray, t);

        codeGen.arrayLength(arr);
        return new YaplAttrib(Attrib.RegValue, Type.INT);
    }
}

Attrib PrimaryExpr() throws YaplException :
{Token t; Attrib x;}
{
    (
        x=Literal()
        | <L_BRACKET> x=Expr() <R_BRACKET>
        | LOOKAHEAD(2) x=ProcedureCall() {
            if (x.getType().isVoid()) {
                t = ((SimpleNode) jjtree.peekNode()).jjtGetFirstToken();
                throw new YaplException(ProcNotFuncExpr, t, t);
            }
        }
        | t=<ident> {
            String symbolName = t.image;
            symbolTable.checkCorrectDeclarationAsPrimaryExpression(symbolName, t.beginLine, t.beginColumn);
            x = new YaplAttrib(symbolTable.lookup(symbolName));
        } [ x=Selector(x) ] { codeGen.loadValue(x); }
        | x=ArrayLen()
    ) {return x;}
}

Attrib UnaryExpr() throws YaplException #void :
{Token op = null; Attrib x;}
{
    [ op=AddOp() ] x=PrimaryExpr() { return codeGen.op1(op, x); }
}

Attrib MulExpr() throws YaplException #void :
{Token op = null; Attrib x, y; Type resultType, rType;}
{
    x=UnaryExpr() ( op=MulOp() y=UnaryExpr() { x = codeGen.op2(x, op, y); } )* { return x; }
}

Attrib AddExpr() throws YaplException #void :
{Token op; Attrib x, y;}
{
    x=MulExpr() ( op=AddOp() y=MulExpr() { x = codeGen.op2(x, op, y); } )* { return x; }
}

Attrib RelExpr() throws YaplException :
{Token op; Attrib x, y;}
{
    x=AddExpr() [ op=RelOp() y=AddExpr() { x = codeGen.relOp(x, op, y); } ] { return x; }
}

Attrib EqualExpr() throws YaplException :
{Token op; Attrib x, y;}
{
    x=RelExpr() [ op=EqualOp() y=RelExpr() { x = codeGen.equalOp(x, op, y); } ] { return x; }
}

Attrib CondAndExpr() throws YaplException :
{Token op; Attrib x, y;}
{
    x=EqualExpr() ( op=<AND> y=EqualExpr() { x = codeGen.op2(x, op, y); } )* { return x; }
}

/**
* Creation of a new array or record.
*/
Attrib CreationExpr() throws YaplException :
{
    Token tNew, tArray;
    int dim = 0;
    Type type;
    Attrib size;
}
{
    tNew=<NEW> type=NonArrayType() ( <L_SQ_BRACKET>
        {
            // 1. create array to store the dimensions
            codeGen.prepareForAnotherArrayDimension();
        }
        size=Expr() tArray=<R_SQ_BRACKET> {
        if (!size.getType().isInt())
            throw new YaplException(BadArraySelector, tArray);

        dim++;

        // 2. store the dim in the ith dimension-array column
        codeGen.storeArrayDim(dim, size);
    } )*
    {
        if (dim != 0) {
            // is array
            ArrayType arrayType = new ArrayType(dim, type);
            return codeGen.allocArray(arrayType);

        } else if (type.isRecord()) {
            // is record
            return codeGen.allocRecord((RecordType)type);
        } else {
            throw new YaplException(InvalidNewType, tNew);
        }
    }
}

Attrib Expr() throws YaplException :
{Token op; Attrib x, y;}
{
    x=CondAndExpr() ( op=<OR> y=CondAndExpr() { x = codeGen.op2(x, op, y); } )* { return x; }

  | x=CreationExpr() { return x; }
}

Attrib CondExpr() throws YaplException #void :
{Attrib x;}
{
    x=Expr()
    {
        if (!x.getType().isBool()) {
            Token t = ((SimpleNode) jjtree.peekNode()).jjtGetFirstToken();
            throw new YaplException(CondNotBool, t);
        }

        return x;
    }
}

List<Attrib> ArgumentList() throws YaplException :
{Attrib x; List<Attrib> argList = new LinkedList<Attrib>();}
{
    x=Expr() { argList.add(x); } ( <COMMA> x=Expr() { argList.add(x); } )*
    {return argList;}
}

// calls a procedure
// f.e.: someProcedure()
// throws an exception if the identifier is not found
Attrib ProcedureCall() throws YaplException :
{Token tName, tBracket; List<Attrib> argList = new LinkedList<Attrib>();}
{
    tName=<ident>
    {
        String symbolName = tName.image;
        symbolTable.checkCorrectDeclarationAsProcedure(symbolName, tName.beginLine, tName.beginColumn);

        Symbol proc = symbolTable.lookup(symbolName);
        Type type = proc.getType();
        if (type == null || !type.isProcedure())
            throw new YaplException(Internal, tName, "procedure symbol is not procedure");

        ProcedureType procType = (ProcedureType) type;
        Type returnType = procType.getReturnType();
    }
    <L_BRACKET> [ argList=ArgumentList() ] tBracket=<R_BRACKET>
    {
        // region check for incorrect parameters
        Iterator<Type> referenceArgList = procType.getParams().values().iterator();
        int i = 0;
        for (Attrib actual : argList) {
            Type reference = referenceArgList.hasNext() ? referenceArgList.next() : null;
            if (reference == null || !reference.equals(actual.getType())) {
                // the first token of the i-th argument (of the argument list)
                Token tArg = ((SimpleNode) jjtThis.jjtGetChild(0).jjtGetChild(i)).jjtGetFirstToken();
                throw new YaplException(ArgNotApplicable, tArg, Integer.toString(i+1), tName);
            }
            i++;
        }

        if (referenceArgList.hasNext())
            throw new YaplException(TooFewArgs, tBracket, tName);
        // endregion

        // new Attrib[0] is used to cast the array to the right datatype
        return codeGen.callProc(proc, argList.toArray(new Attrib[0]));
    }
}

// assigns a value to an identifier
// f.e.: a := 7;
// throws an exception if the identifier is not found
// throws an exception if the identifier cannot be written to e.g. it is a procedure
void Assignment() throws YaplException :
{Token t; Attrib lvalue, expr;}
{
    t=<ident> {
        String symbolName = t.image;
        symbolTable.checkCorrectDeclarationAsLValue(symbolName, t.beginLine, t.beginColumn);
        lvalue = new YaplAttrib(symbolTable.lookup(symbolName));
    }
    [
     lvalue=Selector(lvalue)
    ]
        t=<ASSIGN> expr=Expr()
    {
        if (!lvalue.getType().equals(expr.getType()))
            throw new YaplException(TypeMismatchAssign, t);

        codeGen.assign(lvalue, expr);
    }
}

void IfStatement() throws YaplException :
{Attrib cond; String elseLabel = codeGen.newLabel(), endIfLabel = codeGen.newLabel();}
{
    <IF> cond=CondExpr()
    { codeGen.branchIfFalse(cond, elseLabel); }
    <THEN> StatementList()
    {
        codeGen.jump(endIfLabel);
        codeGen.assignLabel(elseLabel);
    }
    [ <ELSE> StatementList() ]
    { codeGen.assignLabel(endIfLabel); }
    <ENDIF>
}

void WhileStatement() throws YaplException :
{Attrib cond; String whileLabel = codeGen.newLabel(), endWhileLabel = codeGen.newLabel();}
{
    { codeGen.assignLabel(whileLabel); }
    <WHILE> cond=CondExpr() { codeGen.branchIfFalse(cond, endWhileLabel); }
    <DO> StatementList()
    {
        codeGen.jump(whileLabel);
        codeGen.assignLabel(endWhileLabel);
    }
    <ENDWHILE>
}

void ReturnStatement() throws YaplException :
{Token t; Attrib x = null;}
{
    t=<RETURN> [ x=Expr() { t = ((SimpleNode) jjtree.peekNode()).jjtGetFirstToken(); } ]
    {
        Type refType;
        ErrorType errorType;
        String procName = null;

        Symbol proc = symbolTable.getNearestParentSymbol(YaplSymbol.Procedure);
        if (proc != null) {
            if (!proc.getType().isProcedure())
                throw new YaplException(Internal, t, "procedure type is not ProcedureType");

            proc.setReturnSeen(true);

            ProcedureType procType = (ProcedureType) proc.getType();
            refType = procType.getReturnType();
            procName = procType.name;
            errorType = refType.isVoid() ? IllegalRetValProc : InvalidReturnType;
        } else {
            // main is just a special procedure
            proc = symbolTable.getNearestParentSymbol(YaplSymbol.Program);
            refType = Type.VOID;
            errorType = IllegalRetValMain;
        }

        Type actualType = x == null ? Type.VOID : x.getType();
        if (!refType.equals(actualType)
            // _allocArray returns wrong type per design
            && !(procName != null && procName.equals("_allocArray")))
            throw new YaplException(errorType, t, procName);

        codeGen.returnFromProc(proc, x);
    }
}

void WriteStatement() throws YaplException :
{Token s;}
{
    <WRITE> s=<string> { codeGen.writeString(s.image); }
}

void Statement() throws YaplException #void :
{}
{
    IfStatement() | WhileStatement() | ReturnStatement() | WriteStatement() | LOOKAHEAD(2) Assignment() | ProcedureCall() | Block()
}

void StatementList() throws YaplException :
{}
{
    ( Statement() <SEMICOLON> )*
}

void Block() throws YaplException :
{}
{
    { symbolTable.openScope(); }
    [ Decl(false) ] <BEGIN> StatementList() <END>
    { symbolTable.closeScope(); }
}

Type NonArrayType() throws YaplException #void :
{Token t;}
{
    <INT> { return Type.INT; } | <BOOL> { return Type.BOOL; } | t=<ident>
    {
        symbolTable.checkCorrectDeclarationAsTypeName(t.image, t.beginLine, t.beginColumn);
        return symbolTable.lookup(t.image).getType();
    }
}

Type Type() throws YaplException #void :
{int dim = 0; Type elemType;}
{
    elemType=NonArrayType() ( <L_SQ_BRACKET> <R_SQ_BRACKET> {dim++;} )*
    {
        if (dim == 0) {
            return elemType;
        } else {
            return new ArrayType(dim, elemType);
        }
    }
}

Type ReturnType() throws YaplException #void :
{Type type;}
{
    <VOID> { return Type.VOID; } | type=Type() { return type; }
}

// declares a constant in the current scope
// f.e.: Const len = 10;
// throws an exception if the identifier already exists
void ConstDecl(boolean global) throws YaplException :
{Token t; Attrib x;}
{
    <CONST> t=<ident>
    {
        Symbol s = new YaplSymbol(t.image, SymbolKind.Constant);
        s.setGlobal(global);
        s.setReadonly(true);
        symbolTable.addSymbol(s, t.beginLine, t.beginColumn);

        // this sets the offset for s
        codeGen.allocVariable(s);
    }
    <CONST_ASSIGN> x=Literal() <SEMICOLON>
    {
        // type depends on literal
        s.setType(x.getType());
        // assign value to constant
        codeGen.assign(new YaplAttrib(s), x);
    }
}

// declares a constant in the current scope
// f.e.: int i, j;
// throws an exception if the identifier already exists
void VarDecl(boolean global) throws YaplException :
{Token t; Type type; Symbol s;}
{
    type=Type() t=<ident>
    {
        s = new YaplSymbol(t.image, SymbolKind.Variable, type);
        s.setGlobal(global);
        symbolTable.addSymbol(s, t.beginLine, t.beginColumn);
        codeGen.allocVariable(s);
    }
    ( <COMMA> t=<ident>
        {
            s = new YaplSymbol(t.image, SymbolKind.Variable, type);
            s.setGlobal(global);
            symbolTable.addSymbol(s, t.beginLine, t.beginColumn);
            codeGen.allocVariable(s);
        }
    )* <SEMICOLON>
}

// declares a field in a record type
// f.e.: int width, height;
// throws an exception if the identifier already exists
void FieldDecl(RecordType recordType) throws YaplException :
{Token t; Type type; Symbol s;}
{
    type=Type() t=<ident>
    {
        s = new YaplSymbol(t.image, SymbolKind.Variable, type);
        symbolTable.addSymbol(s, t.beginLine, t.beginColumn);
        recordType.addField(s);
    }
    ( <COMMA> t=<ident>
        {
            s = new YaplSymbol(t.image, SymbolKind.Variable, type);
            symbolTable.addSymbol(s, t.beginLine, t.beginColumn);
            recordType.addField(s);
        }
    )* <SEMICOLON>
}

// declares a Record in the current scope
// as in : RECORD
// throws an exception if the identifier already exists
void TypeDecl(boolean global) throws YaplException :
{Token t;}
{
    <RECORD> t=<ident>
    {
        RecordType recordType = new RecordType(t.image);
        YaplSymbol s = new YaplSymbol(t.image, SymbolKind.Typename, recordType);
        s.setGlobal(global);
        symbolTable.openScope(s, t.beginLine, t.beginColumn);
    }
    FieldDecl(recordType) ( FieldDecl(recordType) )* <ENDRECORD> <SEMICOLON>
    {
        codeGen.setFieldOffsets(recordType);
        symbolTable.closeScope();
    }
}

void Decl(boolean global) throws YaplException #Declarations :
{}
{
    <DECLARE> ( ConstDecl(global) | VarDecl(global) | TypeDecl(global) )*
}

void FormalParam(ProcedureType procedure) throws YaplException #void :
{Token t; Type type;}
{
    type=Type() t=<ident>
    {
        int offset = procedure.addParam(t.image, type);
        Symbol s = new YaplSymbol(t.image, SymbolKind.Parameter, type);
        s.setOffset(offset);
        symbolTable.addSymbol(s, t.beginLine, t.beginColumn);
    }
}

void FormalParamList(ProcedureType procedure) throws YaplException #void :
{}
{
    FormalParam(procedure) ( <COMMA> FormalParam(procedure) )*
}

void Procedure() throws YaplException :
{Token name, endName; Type returnType;}
{
    <PROCEDURE> returnType=ReturnType() name=<ident>
    {
        ProcedureType procType = new ProcedureType(name.image, returnType);
        YaplSymbol proc = new YaplSymbol(name.image, SymbolKind.Procedure, procType);
        symbolTable.openScope(proc, name.beginLine, name.beginColumn);
    }
    <L_BRACKET> [ FormalParamList(procType) ] <R_BRACKET>
    {
        // gen enter proc label including nParams
        codeGen.enterProc(proc);
    }
    Block() endName=<ident> <SEMICOLON>
    {
        symbolTable.closeScope(endName.image, false, endName.beginLine, endName.beginColumn);

        // procedures that have a return type (other than void) must have at least one return statement
        if (!returnType.isVoid() && !proc.getReturnSeen()) {
            // correct token for this exception is the "End" from the Block()
            Token t = jjtThis.jjtGetLastToken();
            throw new YaplException(MissingReturn, t, name);
        }

        codeGen.exitProc(proc);
    }
}
