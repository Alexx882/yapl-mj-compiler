options {
    LOOKAHEAD = 1;
    MULTI = true;
    TRACK_TOKENS = true;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = false;
    IGNORE_CASE = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    SANITY_CHECK = true;
    FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Yapl)

package yapl.compiler;

import yapl.impl.*;
import yapl.interfaces.*;
import yapl.lib.*;

import static yapl.impl.ErrorType.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

/**
 * Processes a yapl file.
 *
 * Usage: java Yapl [--scan-only] [path]
 *
 * Where path is the path to a yapl source file.
 * If no source file is provided, input will be read from STDIN.
 */
public class Yapl {
    private static String progName = ""; // has to be known even on error

    private static SymbolTable symbolTable = new SymbolTable();

    public static void main(String[] args) throws FileNotFoundException {
        // parse per default
        boolean parse = true;
        String path = null;

        for (String arg : args) {
            if ("--scan-only".equalsIgnoreCase(arg)) {
                parse = false;
            } else {
                path = arg;
            }
        }

        // if no path is provided, read from STDIN
        InputStream input = path != null ? new FileInputStream(path) : System.in;

        Yapl parser = new Yapl(input);

        //noinspection TryWithIdenticalCatches // since jjtree apparently does not support collapsed catches
        try {
            if (parse){
                parser.Program();
                CompilerMessage.printOK(progName);
            }
            else
                parser.PrintTokens();

        } catch (TokenMgrError e) {
            CompilerMessage.printError(e, progName);
        } catch (ParseException e) {
            CompilerMessage.printError(e, progName);
        } catch (YaplException e) {
            CompilerMessage.printError(e, progName);
        }
    }
}

PARSER_END(Yapl)

SKIP : // ignore whitespace
{
    " " | "\t" | "\n" | "\r"
}

SPECIAL_TOKEN : // comment syntax from JavaCC docs
{
  "/*" : WithinComment // switch to WithinComment state
}

<WithinComment> SPECIAL_TOKEN :
{
  "*/" : DEFAULT // switch back to normal
}

<WithinComment> MORE : // append to previous token
{
  // since the end comment "*/" is defined above, there is no need to explicitly check for it
  <~[]> // "not nothing" -> any symbol
}

TOKEN : { // Keywords. Need to be defined before <ident>
    < TRUE: "True" >
  | < FALSE: "False" >
  | < NEW: "new" >
  | < AND: "And" >
  | < OR: "Or" >
  | < IF: "If" >
  | < THEN: "Then" >
  | < ELSE: "Else" >
  | < ENDIF: "EndIf" >
  | < WHILE: "While" >
  | < DO: "Do" >
  | < ENDWHILE: "EndWhile" >
  | < RETURN: "Return" >
  | < WRITE: "Write" >
  | < BEGIN: "Begin" >
  | < END: "End" >
  | < INT: "int" >
  | < BOOL: "bool" >
  | < VOID: "void" >
  | < CONST: "Const" >
  | < RECORD: "Record" >
  | < ENDRECORD: "EndRecord" >
  | < DECLARE: "Declare" >
  | < PROCEDURE: "Procedure" >
  | < PROGRAM: "Program" >
}

TOKEN : { // operators
    < GT: ">" >
  | < GE: ">=" >
  | < LT: "<" >
  | < LE: "<=" >
  | < EQ: "==" >
  | < NE: "!=" >
  | < ADD: "+" >
  | < SUB: "-" >
  | < MUL: "*" >
  | < DIV: "/" >
  | < MOD: "%" >
  | < CONST_ASSIGN: "=" >
  | < ASSIGN: ":=" >
  | < ARR_LEN: "#" >
  | < L_BRACKET: "(" >
  | < R_BRACKET: ")" >
  | < L_SQ_BRACKET: "[" >
  | < R_SQ_BRACKET: "]" >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < DOT: "." >
}

TOKEN :
{
    < ident: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
    < number: ( ["0"-"9"] )+ >
|
    < string: "\"" ([" ","a"-"z","A"-"Z","_","0"-"9",
                   "+","-","*","/",".",",",";",":","!","?","=","#","%","<",">","$",
                   "(",")","[","]","{","}","\\","@","&","^","|"])* "\"">
}

ASTProgram Program() throws YaplException :
{Token name, endName;}
{
    <PROGRAM> name=<ident> {
    progName=name.image;

    symbolTable.openScope();

    YaplSymbol symbol = new YaplSymbol(progName, SymbolKind.Program);
    symbolTable.setParentSymbol(symbol);

} ( Decl() | Procedure() )* <BEGIN> StatementList() <END> endName=<ident> <DOT> {
    symbolTable.closeScope(endName.image, true, endName.beginLine, endName.beginColumn);
    } <EOF> {return jjtThis;}
}

void PrintTokens() :
{ Token t; }
{
    {
        do {
            t = getNextToken();

            // collect special tokens that appeared between t and the last token
            // access through t.specialToken (if more than one, then access recursively -> need to reverse order)


            //noinspection Convert2Diamond // since jjtree apparently does not support those
            Stack<Token> stack = new Stack<Token>();
            Token s = t.specialToken;
            while (s != null) {
                stack.push(s);
                s = s.specialToken;
            }

            if (!stack.empty()) {
                System.out.println("[begin special]");
                while (!stack.empty())
                    System.out.println(stack.pop().toString());
                System.out.println("[end special]");
            }

            System.out.println(t.toString());
        } while (t.kind != EOF);
    }
    <EOF >
}

Token RelOp() throws YaplException :
{Token t;}
{
    (t=<LT> | t=<LE> | t=<GT> | t=<GE>) {return t;}
}

Token EqualOp() throws YaplException :
{Token t;}
{
    (t=<EQ> | t=<NE>) {return t;}
}

Token AddOp() throws YaplException :
{Token t;}
{
    (t=<ADD> | t=<SUB>) {return t;}
}

Token MulOp() throws YaplException :
{Token t;}
{
    (t=<MUL> | t=<DIV> | t=<MOD>) {return t;}
}

Type Literal() throws YaplException :
{Token t;}
{
    (
        <TRUE> {jjtThis.setValue(true);}
      | <FALSE> {jjtThis.setValue(false);}
      | t=<number> {jjtThis.setValue(Integer.parseInt(t.image));}
    ) { return jjtThis.getType(); }
}

// used to access properties of records.
// f.e.: someRecord.someProperty
Type Selector(Type parentType) throws YaplException :
{Type type, resultType; Token t;}
{
    ( t=<L_SQ_BRACKET> type=Expr()
    {
        if (!parentType.isArray())
            throw new YaplException(SelectorNotArray, t);
        if (!type.isInt())
            throw new YaplException(BadArraySelector, t);

        resultType = ((ArrayType) parentType).getIlimType();
    }
    <R_SQ_BRACKET> | <DOT> t=<ident>
    {
        if (!parentType.isRecord())
            throw new YaplException(SelectorNotRecord, t);

        RecordType parentRecordType = (RecordType) parentType;
        if (!parentRecordType.hasField(t.image))
            throw new YaplException(InvalidRecordField, t, t, parentRecordType.name);

        resultType = parentRecordType.getFieldType(t.image);
    }
    ) [ resultType=Selector(resultType) ] { return resultType; }
}

// retrieves the length of an array.
// throws an exception if the identifier is not found
// throws an exception if the "#" operator is applied to a non-array
// f.e.: #someArray
Type ArrayLen() throws YaplException :
{Token t;}
{
    <ARR_LEN> t=<ident> {
        String symbolName = t.image;
        symbolTable.checkCorrectDeclarationAsArray(symbolName, t.beginLine, t.beginColumn);
        Type type = symbolTable.lookup(symbolName).getType();
    }
    [ type=Selector(type) ]
    {
        if (!type.isArray())
            throw new YaplException(ArrayLenNotArray, t);
        return type; // todo should be int right?
    }
}

Type PrimaryExpr() throws YaplException :
{Token t; Type type;}
{
    (
        type=Literal() | <L_BRACKET> type=Expr() <R_BRACKET> | LOOKAHEAD(2) type=ProcedureCall() {
            if (type.isVoid()) {
                t = ((SimpleNode) jjtree.peekNode()).jjtGetFirstToken();
                throw new YaplException(ProcNotFuncExpr, t, t);
            }
        } | t=<ident> {
            String symbolName = t.image;
            symbolTable.checkCorrectDeclarationAsPrimaryExpression(symbolName, t.beginLine, t.beginColumn);
            type = symbolTable.lookup(symbolName).getType();
        } [ type=Selector(type) ] | ArrayLen() { type = Type.INT; }
    ) {return type;}
}

Type UnaryExpr() throws YaplException :
{Token t = null; Type resultType;}
{
    [ /*jjtThis.op=*/t=AddOp() ] resultType=PrimaryExpr()
    {
        if (t != null && !resultType.isInt())
            throw new YaplException(IllegalOp1Type, t, t);
        return resultType;
    }
}

Type MulExpr() throws YaplException :
{Token t; Type resultType, rType;}
{
    resultType=UnaryExpr() ( /*jjtThis.op=*/t=MulOp() rType=UnaryExpr() /*#MulExpr*/
        {
            if (!resultType.isInt() || !rType.isInt())
                throw new YaplException(IllegalOp2Type, t, t);
            //resultType = Type.INT;
        }
    )*
    { return resultType; }
}

Type AddExpr() throws YaplException :
{Token t; Type resultType, rType;}
{
    resultType=MulExpr() ( /*jjtThis.op=*/t=AddOp() rType=MulExpr() /*#AddExpr*/
        {
            if (!resultType.isInt() || !rType.isInt())
                throw new YaplException(IllegalOp2Type, t, t);
            //resultType = Type.INT;
        }
    )*
    { return resultType; }
}

Type RelExpr() throws YaplException :
{Token t; Type resultType, rType;}
{
    resultType=AddExpr() [ /*jjtThis.op=*/t=RelOp() rType=AddExpr() /*#RelExpr*/
        {
            if (!resultType.isInt() || !rType.isInt())
                throw new YaplException(IllegalRelOpType, t, t);
            resultType = Type.BOOL;
        }
    ]
    { return resultType; }
}

Type EqualExpr() throws YaplException :
{Token t; Type resultType, rType;}
{
    resultType=RelExpr() [ /*jjtThis.op=*/t=EqualOp() rType=RelExpr() /*#EqualExpr*/
        {
            if (!resultType.equals(rType) || !(resultType.isInt() || resultType.isBool()))
                throw new YaplException(IllegalEqualOpType, t, t);
            resultType = Type.BOOL;
        }
    ]
    { return resultType; }
}

Type CondAndExpr() throws YaplException :
{Token t; Type resultType, rType;}
{
    resultType=EqualExpr() ( t=<AND> rType=EqualExpr()
    {
        if (!resultType.isBool() || !rType.isBool())
            throw new YaplException(IllegalOp2Type, t, t);
        //resultType = Type.BOOL;
    }
    )* { return resultType; }
}

Type CreationExpr() throws YaplException :
{Token tNew, tArray; int dim = 0; Type type, sizeType;}
{
    tNew=<NEW> type=NonArrayType() ( <L_SQ_BRACKET> sizeType=Expr() tArray=<R_SQ_BRACKET>
        {
            if (!sizeType.isInt())
                throw new YaplException(BadArraySelector, tArray);
            dim++;
        }
    )*
    {
        if (dim == 0 && !type.isRecord())
            throw new YaplException(InvalidNewType, tNew);
        return dim == 0 ? type : new ArrayType(dim, type);
    }
}

Type Expr() throws YaplException :
{Token t; Type rType, resultType;}
{
    (
        resultType=CondAndExpr() ( t=<OR> rType=CondAndExpr()
        {
            if (!resultType.isBool() || !rType.isBool())
                throw new YaplException(IllegalOp2Type, t, t);
            //resultType = Type.BOOL;
        }
        )* | resultType=CreationExpr()
    ) { return resultType; }
}

void CondExpr() throws YaplException #void :
{Type type;}
{
    type=Expr()
    {
        if (!type.isBool()) {
            Token t = ((SimpleNode) jjtree.peekNode()).jjtGetFirstToken();
            throw new YaplException(CondNotBool, t);
        }
    }
}

List<Type> ArgumentList() throws YaplException :
{Type type; List<Type> argList = new LinkedList<Type>();}
{
    type=Expr() { argList.add(type); } ( <COMMA> type=Expr() { argList.add(type); } )*
    {return argList;}
}

// calls a procedure
// f.e.: someProcedure()
// throws an exception if the identifier is not found
Type ProcedureCall() throws YaplException :
{Token tName, tBracket; List<Type> argList = new LinkedList<Type>();}
{
    tName=<ident> {
        jjtThis.jjtSetValue(tName);
        String symbolName = tName.image;
        symbolTable.checkCorrectDeclarationAsProcedure(symbolName, tName.beginLine, tName.beginColumn);
        Type type = symbolTable.lookup(symbolName).getType();
        if (type == null || !type.isProcedure())
            throw new YaplException(Internal, tName, "procedure symbol is not procedure");
        Type returnType = ((ProcedureType) type).getReturnType();
    } <L_BRACKET> [ argList=ArgumentList() ] tBracket=<R_BRACKET>
    {
        Iterator<Type> actualArgs = ((ProcedureType) type).getParams().values().iterator();
        int i = 0;
        for (Type actual : argList) {
            Type reference = actualArgs.hasNext() ? actualArgs.next() : null;
            if (reference == null || !reference.equals(actual)) {
                Token tArg = ((SimpleNode) jjtThis.jjtGetChild(0).jjtGetChild(i)).jjtGetFirstToken();
                throw new YaplException(ArgNotApplicable, tArg, Integer.toString(i+1), tName);
            }
            i++;
        }

        if (actualArgs.hasNext())
            throw new YaplException(TooFewArgs, tBracket, tName);

        return returnType;
    }
}

// assigns a value to an identifier
// f.e.: a := 7;
// throws an exception if the identifier is not found
// throws an exception if the identifier cannot be written to e.g. it is a procedure
void Assignment() throws YaplException :
{Token t; Type lType, rType;}
{
    t=<ident> {
        String symbolName = t.image;
        symbolTable.checkCorrectDeclarationAsLValue(symbolName, t.beginLine, t.beginColumn);
        lType = symbolTable.lookup(symbolName).getType();
    } [ lType=Selector(lType) ] t=<ASSIGN> rType=Expr()
    {
        if (!lType.equals(rType))
            throw new YaplException(TypeMismatchAssign, t);
    }
}

void IfStatement() throws YaplException :
{}
{
    <IF> CondExpr()
    <THEN> StatementList()
    [ <ELSE> StatementList() ]
    <ENDIF>
}

void WhileStatement() throws YaplException :
{}
{
    <WHILE> CondExpr() <DO> StatementList() <ENDWHILE>
}

Type ReturnStatement() throws YaplException :
{Token t; Type type; boolean hasExpr = false;}
{
    t=<RETURN> {type=Type.VOID;} [ type=Expr()
        {
            t = ((SimpleNode) jjtree.peekNode()).jjtGetFirstToken();
            hasExpr = true;
        }
    ]
    {
        Type refType;
        ErrorType errorType;
        Symbol s = symbolTable.getNearestParentSymbol(YaplSymbol.Procedure);
        String procName = null;
        if (s != null) {
            if (!s.getType().isProcedure())
                throw new YaplException(Internal, t, "procedure type is not ProcedureType");

            ProcedureType procType = (ProcedureType) s.getType();
            refType = procType.getReturnType();
            procName = procType.name;
            errorType = refType.isVoid() ? IllegalRetValProc : InvalidReturnType;
        } else {
            refType = Type.VOID;
            errorType = IllegalRetValMain;
        }

        if (hasExpr && refType.isVoid())
            throw new YaplException(errorType, t, procName);
        if (!refType.equals(type))
            throw new YaplException(errorType, t, procName);

        return type;
    }
}

void WriteStatement() throws YaplException :
{}
{
    <WRITE> jjtThis.value=<string>
}

void Statement() throws YaplException #void :
{}
{
    IfStatement() | WhileStatement() | ReturnStatement() | WriteStatement() | LOOKAHEAD(2) Assignment() | ProcedureCall() | Block()
}

void StatementList() throws YaplException :
{}
{
    ( Statement() <SEMICOLON> )*
}

void Block() throws YaplException :
{}
{
    { symbolTable.openScope(); }
    [ Decl() ] <BEGIN> StatementList() <END>
    { symbolTable.closeScope(); }
}

Type NonArrayType() throws YaplException #void :
{Token t;}
{
    <INT> { return Type.INT; } | <BOOL> { return Type.BOOL; } | t=<ident>
    {
        symbolTable.checkCorrectDeclarationAsTypeName(t.image, t.beginLine, t.beginColumn);
        return symbolTable.lookup(t.image).getType();
    }
}

Type Type() throws YaplException #void :
{int dim = 0; Type elemType;}
{
    elemType=NonArrayType() ( <L_SQ_BRACKET> <R_SQ_BRACKET> {dim++;} )*
    {
        if (dim == 0) {
            return elemType;
        } else {
            return new ArrayType(dim, elemType);
        }
    }
}

Type ReturnType() throws YaplException #void :
{Type type;}
{
    <VOID> { return Type.VOID; } | type=Type() { return type; }
}

// declares a constant in the current scope
// f.e.: Const len = 10;
// throws an exception if the identifier already exists
void ConstDecl() throws YaplException :
{Token t; Type type;}
{
    <CONST> t=<ident>
    {
        Symbol s = new YaplSymbol(t.image, SymbolKind.Constant);
        symbolTable.addSymbol(s, t.beginLine, t.beginColumn);
    }
    <CONST_ASSIGN> type=Literal()
    { s.setType(type); }
    <SEMICOLON>
}

// declares a constant in the current scope
// f.e.: int i, j;
// throws an exception if the identifier already exists
void VarDecl() throws YaplException :
{Token t, t2; Type type;}
{
    type=Type() t=<ident>
    {
         symbolTable.addSymbol(
                 new YaplSymbol(t.image, SymbolKind.Variable, type),
                 t.beginLine,
                 t.beginColumn
         );
     }
     ( <COMMA> t2=<ident>
         {
             symbolTable.addSymbol(
                     new YaplSymbol(t2.image, SymbolKind.Variable, type),
                     t2.beginLine,
                     t2.beginColumn
             );
         }
    )* <SEMICOLON>
}

// declares a field in a record type
// f.e.: int width, height;
// throws an exception if the identifier already exists
void FieldDecl(RecordType recordType) throws YaplException :
{Token t, t2; Type type;}
{
    type=Type() t=<ident>
    {
        symbolTable.addSymbol(
                new YaplSymbol(t.image, SymbolKind.Variable, type),
                t.beginLine,
                t.beginColumn
        );
        recordType.addField(t.image, type);
    }
    ( <COMMA> t2=<ident>
    {
        symbolTable.addSymbol(
                new YaplSymbol(t2.image, SymbolKind.Variable, type),
                t2.beginLine,
                t2.beginColumn
        );
        recordType.addField(t2.image, type);
    }
    )* <SEMICOLON>
}

// declares a Record in the current scope
// as in : RECORD
// throws an exception if the identifier already exists
void TypeDecl() throws YaplException :
{Token t;}
{
    <RECORD> t=<ident>
    {
        RecordType recordType = new RecordType(t.image);
        symbolTable.openScope(
                 new YaplSymbol(
                         t.image, SymbolKind.Typename, recordType
                 ),
                 t.beginLine,
                 t.beginColumn
        );
    }
    FieldDecl(recordType) ( FieldDecl(recordType) )* <ENDRECORD> <SEMICOLON>
    { symbolTable.closeScope(); }
}

void Decl() throws YaplException #Declarations :
{}
{
    <DECLARE> ( ConstDecl() | VarDecl() | TypeDecl() )*
}

void FormalParam(ProcedureType procedure) throws YaplException #void :
{Token t; Type type;}
{
    type=Type() t=<ident> {
        symbolTable.addSymbol(
                 new YaplSymbol(
                         t.image, SymbolKind.Parameter, type
                 ),
                 t.beginLine,
                 t.beginColumn
        );
        procedure.addParam(t.image, type);
    }
}

void FormalParamList(ProcedureType procedure) throws YaplException #void :
{}
{
    FormalParam(procedure) ( <COMMA> FormalParam(procedure) )*
}

Type Procedure() throws YaplException :
{Token name, endName; Type returnType;}
{
    <PROCEDURE> returnType=ReturnType() name=<ident>
    {
        ProcedureType procedure = new ProcedureType(name.image, returnType);
        symbolTable.openScope(
                new YaplSymbol(name.image, SymbolKind.Procedure, procedure),
                name.beginLine,
                name.beginColumn
        );
    }
    <L_BRACKET> [ FormalParamList(procedure) ] <R_BRACKET> Block() endName=<ident> <SEMICOLON>
    {
        symbolTable.closeScope(endName.image, false, endName.beginLine, endName.beginColumn);

        // procedures that have a return type (other than void) must have at least one return statement
        if (returnType != Type.VOID && !NodeUtils.hasChildOfType(jjtThis, ASTReturnStatement.class, -1)) {
            // correct token for this exception is the "End" from the Block()
            Token t = jjtThis.jjtGetLastToken();
            throw new YaplException(MissingReturn, t, name);
        }

        return returnType;
    }
}
